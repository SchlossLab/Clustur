[{"path":"http://www.schlosslab.org/Clustur/articles/Using-clustur.html","id":"starting-up","dir":"Articles","previous_headings":"","what":"Starting Up","title":"Using clustur","text":"clustur developed similarly traditional c++ implementation, however differences note. order clustur data, requiring users build sparse matrix (also support phylip files) count table R. objects built can call cluster function. currently support 5 cluster functions mothur: furthest, nearest, weighted, average, opticluster. clusters produce data comparable mothur efficiently. show create sparse matrix count table. worry count table, long data, can create blank count table. blank count table still output cluster results, abundance information describe frequency.","code":""},{"path":"http://www.schlosslab.org/Clustur/articles/Using-clustur.html","id":"to-begin","dir":"Articles","previous_headings":"Starting Up","what":"To Begin","title":"Using clustur","text":"Lets create sparse matrix: easiest way create sparse matrix, use spMatrix function Matrix library. Now matrix represented tripliclate. example names correspond indexes, use index numbers names create count table. ways cluster data, lets start using opticluster method: opticluster outputs list 4 dataframes. clustering data, abundance data, cluster metrics, additional clustering metrics. cluster looks like : otu represent clusters, label represents highest cutoff, bin represents sequences inside cluster.","code":"# Lets create some data i_values <- as.integer(1:100) j_values <- as.integer(sample(1:100, 100, T)) x_values <- as.numeric(runif(100, 0, 1)) s_matrix <- spMatrix(nrow=max(i_values), ncol=max(i_values), i=i_values, j=j_values, x=x_values) s_matrix #> 100 x 100 sparse Matrix of class \"dgTMatrix\" #>                                                                                       #> [1,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 0.9842192 . . ...... #> [2,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         . . ...... #>  #>  .............................. #>  ........suppressing 67 columns and 97 rows in show(); maybe adjust options(max.print=, width=) #>  .............................. #>                                                                                          #> [100,] . . . . . . . . . . . . . . . . . . . . . . 0.05284394 . . . . . . . . . . ...... # We are using random numbers between one and 100, so that will be our first column # We will also give each sequence an abundance of 1 count_table <- data.frame(sequence=as.character(i_values), total=rep(1,times=100)) cluster_results <- opti_cluster(cutoff=0.2, count_table = count_table, sparse_matrix=s_matrix) cluster_results$cluster #>      label #> 1 0.200000 #> 2 0.200000 #> 3 0.200000 #>                                                                                                                                                        bins #> 1 1,29,79,41,86,91,5,50,83,51,42,98,94,9,77,21,27,55,90,85,81,54,44,84,68,47,2,32,49,20,15,22,88,8,13,73,3,39,10,33,16,93,30,74,46,23,19,45,95,100,80,58,18 #> 2                                               87,60,4,78,72,89,11,63,75,14,97,25,24,59,6,26,70,38,82,61,71,28,40,62,67,92,76,65,31,66,7,17,12,37,43,48,56 #> 3                                                                                                                             69,57,52,96,99,64,35,53,34,36 #>    otu #> 1 otu1 #> 2 otu2 #> 3 otu3"},{"path":"http://www.schlosslab.org/Clustur/articles/Using-clustur.html","id":"count-table","dir":"Articles","previous_headings":"Starting Up > To Begin","what":"Count table","title":"Using clustur","text":"count table required every clustering method. count file used calculate group abundance seqeunces. determine abundant create shared file (additional information Mothur documentation Shared file). created one earlier, lets revisit topic. Lets take look count_table created earlier count table contains two headers, sequence total. sequence header contains names sequences total total abundance. case abundance based groups count table. many different count tables . able create count table unique count sequences (1-100), able use generate table. sequence distance table present, return 0 may disrupt results.","code":"count_table #>   sequence total #> 1        1     1 #> 2        2     1 #> 3        3     1 #> 4        4     1 #> 5        5     1 #> 6        6     1 #> 7        7     1 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 93 rows ]"},{"path":"http://www.schlosslab.org/Clustur/articles/Using-clustur.html","id":"column-distance-file","dir":"Articles","previous_headings":"Starting Up","what":"Column Distance file","title":"Using clustur","text":"Just like mothur can input column files, can thing clustur. using conditional argument, column_path, can use input. also create count table. case, just need ensure every name represented inside table. Since abundance values, just give sequence abundance 0. Additional information:column distance file start let show typically count table: normal count table consists names sequence, total amount abundance (total), groups. count table display group information, however, common include abundance per group dealing numerous sequences. sake demonstration, include group information. Therefore format similar name file Mothur. Keep mind, inside code, detect groups present, add -group tag processing. Using column distance file count table can cluster!","code":"df_count <- read.delim(example_path(\"amazon1.count_table\")) df_count #>   Representative_Sequence total #> 1                  U68630     1 #> 2                  U68595     1 #> 3                  U68600     1 #> 4                  U68591     1 #> 5                  U68647     1 #> 6                  U68661     1 #> 7                  U68605     1 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 91 rows ] amazon_data_column <- opti_cluster(column_path=example_path(\"96_sq_column_amazon.dist\"),                       count_table = df_count, cutoff = 0.2) amazon_data_column$cluster$bins #>  [1] \"U68598,U68619,U68638,U68673,U68686,U68637,U68640,U68678,U68618,U68633,U68602,U68655,U68659,U68645,U68635,U68651,U68613,U68658,U68667,U68624\" #>  [2] \"U68623,U68676,U68663,U68665,U68653,U68647,U68679,U68626,U68660,U68688\"                                                                       #>  [3] \"U68596,U68616,U68628,U68634,U68617,U68614,U68601,U68629,U68607\"                                                                              #>  [4] \"U68592,U68631,U68636,U68683,U68685,U68671,U68687\"                                                                                            #>  [5] \"U68606,U68639,U68649,U68654,U68593,U68684\"                                                                                                   #>  [6] \"U68609,U68682,U68675,U68657,U68627\"                                                                                                          #>  [7] \"U68595,U68666,U68610,U68652\"                                                                                                                 #>  [8] \"U68597,U68648,U68632,U68605\"                                                                                                                 #>  [9] \"U68611,U68670,U68680,U68615\"                                                                                                                 #> [10] \"U68590,U68646,U68644\"                                                                                                                        #> [11] \"U68669,U68677,U68681\"                                                                                                                        #> [12] \"U68591,U68600\"                                                                                                                               #> [13] \"U68630,U68674\"                                                                                                                               #> [14] \"U68621,U68672\"                                                                                                                               #> [15] \"U68589\"                                                                                                                                      #>  [ reached getOption(\"max.print\") -- omitted 16 entries ]"},{"path":"http://www.schlosslab.org/Clustur/articles/Using-clustur.html","id":"phylip-distance-file","dir":"Articles","previous_headings":"Starting Up","what":"Phylip distance file","title":"Using clustur","text":"Just like Mothur allow use column distance matrices phylip distance files. Phylip Files","code":"amazon_data_phylip <- opti_cluster(phylip_path=example_path(\"98_sq_phylip_amazon.dist\"),                       count_table = df_count, cutoff = 0.2) amazon_data_phylip$clusters$bin  #> NULL"},{"path":"http://www.schlosslab.org/Clustur/articles/Using-clustur.html","id":"other-clustering-methods","dir":"Articles","previous_headings":"Starting Up","what":"Other clustering methods","title":"Using clustur","text":"examples using opti-clust method can also use furthest, nearest, average, weighted. Furthest: Nearest: Average: Weighted:","code":"amazon_data_phylip <- cluster(phylip_path=example_path(\"98_sq_phylip_amazon.dist\"),                       count_table = df_count, method=\"furthest\", cutoff = 0.2) amazon_data_phylip$cluster$bins #>  [1] \"U68640,U68651,U68624,U68602,U68637,U68659,U68655,U68598,U68641,U68667,U68673,U68645,U68619,U68678,U68618,U68620,U68638,U68658,U68613,U68635,U68686\" #>  [2] \"U68596,U68614,U68617,U68629,U68607,U68601,U68628,U68634\"                                                                                            #>  [3] \"U68631,U68636,U68595,U68666,U68671,U68610,U68652,U68683\"                                                                                            #>  [4] \"U68647,U68660,U68676,U68653,U68663,U68679,U68665,U68688\"                                                                                            #>  [5] \"U68593,U68606,U68649,U68639,U68654,U68684\"                                                                                                          #>  [6] \"U68609,U68627,U68675,U68657,U68682\"                                                                                                                 #>  [7] \"U68597,U68605,U68632,U68648\"                                                                                                                        #>  [8] \"U68611,U68670,U68615,U68680\"                                                                                                                        #>  [9] \"U68623,U68626,U68630\"                                                                                                                               #> [10] \"U68644,U68590,U68646\"                                                                                                                               #> [11] \"U68669,U68677,U68681\"                                                                                                                               #> [12] \"U68685,U68592,U68687\"                                                                                                                               #> [13] \"U68591,U68600\"                                                                                                                                      #> [14] \"U68612,U68633\"                                                                                                                                      #> [15] \"U68621,U68672\"                                                                                                                                      #>  [ reached getOption(\"max.print\") -- omitted 16 entries ] amazon_data_phylip <- cluster(phylip_path=example_path(\"98_sq_phylip_amazon.dist\"),                       count_table = df_count, method=\"nearest\", cutoff = 0.2) amazon_data_phylip$cluster$bins #>  [1] \"U68644,U68597,U68605,U68632,U68648,U68590,U68646,U68606,U68593,U68649,U68639,U68654,U68684,U68612,U68633,U68624,U68640,U68651,U68655,U68659,U68613,U68602,U68637,U68598,U68618,U68620,U68638,U68658,U68641,U68667,U68673,U68645,U68619,U68678,U68635,U68686\" #>  [2] \"U68669,U68677,U68681,U68616,U68629,U68607,U68596,U68614,U68617,U68601,U68628,U68634,U68674,U68630,U68623,U68626,U68647,U68653,U68660,U68676,U68663,U68679,U68665,U68688\"                                                                                     #>  [3] \"U68631,U68636,U68595,U68666,U68671,U68610,U68652,U68683,U68685,U68592,U68687\"                                                                                                                                                                                #>  [4] \"U68625,U68611,U68670,U68615,U68680\"                                                                                                                                                                                                                          #>  [5] \"U68609,U68627,U68675,U68657,U68682\"                                                                                                                                                                                                                          #>  [6] \"U68591,U68600\"                                                                                                                                                                                                                                               #>  [7] \"U68621,U68672\"                                                                                                                                                                                                                                               #>  [8] \"U68589\"                                                                                                                                                                                                                                                      #>  [9] \"U68594\"                                                                                                                                                                                                                                                      #> [10] \"U68599\"                                                                                                                                                                                                                                                      #> [11] \"U68603\"                                                                                                                                                                                                                                                      #> [12] \"U68608\"                                                                                                                                                                                                                                                      #> [13] \"U68622\"                                                                                                                                                                                                                                                      #> [14] \"U68642\"                                                                                                                                                                                                                                                      #> [15] \"U68643\"                                                                                                                                                                                                                                                      #>  [ reached getOption(\"max.print\") -- omitted 5 entries ] amazon_data_phylip <- cluster(phylip_path=example_path(\"98_sq_phylip_amazon.dist\"),                       count_table = df_count, method=\"average\", cutoff = 0.2) amazon_data_phylip$cluster$bins #>  [1] \"U68640,U68651,U68655,U68624,U68659,U68618,U68620,U68638,U68658,U68598,U68641,U68667,U68673,U68645,U68619,U68678,U68602,U68637,U68613,U68635,U68686\" #>  [2] \"U68596,U68614,U68617,U68629,U68607,U68601,U68628,U68634\"                                                                                            #>  [3] \"U68631,U68636,U68595,U68666,U68671,U68610,U68652,U68683\"                                                                                            #>  [4] \"U68647,U68660,U68676,U68653,U68663,U68679,U68665,U68688\"                                                                                            #>  [5] \"U68593,U68606,U68649,U68639,U68654,U68684\"                                                                                                          #>  [6] \"U68609,U68627,U68675,U68657,U68682\"                                                                                                                 #>  [7] \"U68597,U68605,U68632,U68648\"                                                                                                                        #>  [8] \"U68670,U68615,U68680\"                                                                                                                               #>  [9] \"U68685,U68592,U68687\"                                                                                                                               #> [10] \"U68591,U68600\"                                                                                                                                      #> [11] \"U68623,U68626\"                                                                                                                                      #> [12] \"U68612,U68633\"                                                                                                                                      #> [13] \"U68590,U68646\"                                                                                                                                      #> [14] \"U68621,U68672\"                                                                                                                                      #> [15] \"U68677,U68681\"                                                                                                                                      #>  [ reached getOption(\"max.print\") -- omitted 20 entries ] amazon_data_phylip <- cluster(phylip_path=example_path(\"98_sq_phylip_amazon.dist\"),                       count_table = df_count, method=\"weighted\", cutoff = 0.2) amazon_data_phylip$cluster$bins #>  [1] \"U68640,U68651,U68624,U68659,U68618,U68620,U68638,U68658,U68598,U68641,U68667,U68673,U68645,U68619,U68678,U68602,U68637,U68613,U68635,U68686\" #>  [2] \"U68596,U68614,U68617,U68629,U68607,U68601,U68628,U68634\"                                                                                     #>  [3] \"U68631,U68636,U68595,U68666,U68671,U68610,U68652,U68683\"                                                                                     #>  [4] \"U68647,U68660,U68676,U68653,U68663,U68679,U68665,U68688\"                                                                                     #>  [5] \"U68593,U68606,U68649,U68639,U68654,U68684\"                                                                                                   #>  [6] \"U68609,U68627,U68675,U68657,U68682\"                                                                                                          #>  [7] \"U68597,U68605,U68632,U68648\"                                                                                                                 #>  [8] \"U68670,U68615,U68680\"                                                                                                                        #>  [9] \"U68685,U68592,U68687\"                                                                                                                        #> [10] \"U68591,U68600\"                                                                                                                               #> [11] \"U68623,U68626\"                                                                                                                               #> [12] \"U68612,U68633\"                                                                                                                               #> [13] \"U68590,U68646\"                                                                                                                               #> [14] \"U68621,U68672\"                                                                                                                               #> [15] \"U68677,U68681\"                                                                                                                               #>  [ reached getOption(\"max.print\") -- omitted 21 entries ]"},{"path":"http://www.schlosslab.org/Clustur/articles/Using-clustur.html","id":"results","dir":"Articles","previous_headings":"Starting Up","what":"Results","title":"Using clustur","text":"results clustering algorithm presented list dataframes. cluster function returns two dataframes named abundance, cluster. aundance dataframe contains abundance per group otu. cluster dataframe shows sequence cluster together. clustur contains four dataframes: abundance, cluster, cluster_metrics, other_cluster_metrics. Abundance cluster contain data base cluster functioin, cluster_metrics contains information describing everything clustered. includes f1score, mcc. cluster metrics contains information related f1score, accuracy, etc. examples:","code":""},{"path":"http://www.schlosslab.org/Clustur/articles/Using-clustur.html","id":"cluster-function","dir":"Articles","previous_headings":"Starting Up > Results","what":"Cluster function","title":"Using clustur","text":"Cluster: Abundance:","code":"amazon_data_phylip$cluster #>       label #> 34 0.150000 #> 14 0.150000 #> 32 0.150000 #> 36 0.150000 #> 33 0.150000 #>                                                                                                                                           bins #> 34 U68640,U68651,U68624,U68659,U68618,U68620,U68638,U68658,U68598,U68641,U68667,U68673,U68645,U68619,U68678,U68602,U68637,U68613,U68635,U68686 #> 14                                                                                     U68596,U68614,U68617,U68629,U68607,U68601,U68628,U68634 #> 32                                                                                     U68631,U68636,U68595,U68666,U68671,U68610,U68652,U68683 #> 36                                                                                     U68647,U68660,U68676,U68653,U68663,U68679,U68665,U68688 #> 33                                                                                                   U68593,U68606,U68649,U68639,U68654,U68684 #>      otu #> 34 otu34 #> 14 otu14 #> 32 otu32 #> 36 otu36 #> 33 otu33 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 31 rows ] amazon_data_phylip$abundance #>      label  samples  otu abundance #> 1 0.150000 no_group OTU1         1 #> 2 0.150000 no_group OTU2         1 #> 3 0.150000 no_group OTU3         1 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 33 rows ]"},{"path":"http://www.schlosslab.org/Clustur/articles/Using-clustur.html","id":"clustur-function","dir":"Articles","previous_headings":"Starting Up > Results","what":"clustur function","title":"Using clustur","text":"Cluster: Abundance: Clustering Metics: Clustering Metrics:","code":"amazon_data_phylip_opti <- opti_cluster(phylip_path=example_path(\"98_sq_phylip_amazon.dist\"),                       count_table = df_count, cutoff = 0.2) amazon_data_phylip_opti$cluster #>       label #> 19 0.200000 #> 26 0.200000 #> 17 0.200000 #> 16 0.200000 #> 21 0.200000 #>                                                                                                                                                         bins #> 19 U68598,U68619,U68638,U68673,U68686,U68637,U68641,U68633,U68602,U68613,U68640,U68645,U68659,U68651,U68678,U68620,U68635,U68618,U68624,U68667,U68655,U68658 #> 26                                                                                     U68623,U68676,U68663,U68647,U68688,U68653,U68626,U68660,U68665,U68679 #> 17                                                                                            U68596,U68628,U68601,U68629,U68634,U68607,U68614,U68617,U68616 #> 16                                                                                                   U68595,U68652,U68610,U68666,U68683,U68671,U68631,U68636 #> 21                                                                                                                 U68606,U68639,U68654,U68649,U68593,U68684 #>      otu #> 19 otu19 #> 26 otu26 #> 17 otu17 #> 16 otu16 #> 21 otu21 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 24 rows ] amazon_data_phylip_opti$abundance #>       label  samples   otu abundance #> 1  0.200000 no_group  OTU1         1 #> 2  0.200000 no_group  OTU2         1 #> 3  0.200000 no_group  OTU3         1 #> 4  0.200000 no_group  OTU4         1 #> 5  0.200000 no_group  OTU5         1 #> 6  0.200000 no_group  OTU6         1 #> 7  0.200000 no_group  OTU7         1 #> 8  0.200000 no_group  OTU8         1 #> 9  0.200000 no_group  OTU9         1 #> 10 0.200000 no_group OTU10         1 #> 11 0.200000 no_group OTU11         1 #> 12 0.200000 no_group OTU12         1 #> 13 0.200000 no_group OTU13         3 #> 14 0.200000 no_group OTU14         2 #> 15 0.200000 no_group OTU15         3 #> 16 0.200000 no_group OTU16         8 #> 17 0.200000 no_group OTU17         9 #> 18 0.200000 no_group OTU18         4 #> 19 0.200000 no_group OTU19        22 #> 20 0.200000 no_group OTU20         1 #> 21 0.200000 no_group OTU21         6 #> 22 0.200000 no_group OTU22         5 #> 23 0.200000 no_group OTU23         4 #> 24 0.200000 no_group OTU24         2 #> 25 0.200000 no_group OTU25         2 #> 26 0.200000 no_group OTU26        10 #> 27 0.200000 no_group OTU27         1 #> 28 0.200000 no_group OTU28         3 #> 29 0.200000 no_group OTU29         1 amazon_data_phylip_opti$cluster_metrics #>      mcc accuracy fdr iter cutoff specificity ppv time f1score tn label tp #>      num_otus fn fp sensitivity npv #>  [ reached 'max' / getOption(\"max.print\") -- omitted 4 rows ] amazon_data_phylip_opti$other_cluster_metrics #>      label   cutoff specificity      ppv        ttp  f1score          tn #> 1 0.200000 0.200000    0.999292 0.992288 386.000000 0.851158 4232.000000 #>        mcc         fn       fp sensitivity      npv      fdr accuracy #> 1 0.846289 132.000000 3.000000    0.745174 0.969753 0.992288 0.971597"},{"path":"http://www.schlosslab.org/Clustur/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gregory Johnson. Maintainer.","code":""},{"path":"http://www.schlosslab.org/Clustur/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnson G (2024). clustur: Package One 'Title Case' Line. R package version 1.0, http://www.schlosslab.org/Clustur/.","code":"@Manual{,   title = {clustur: What the Package Does in One 'Title Case' Line},   author = {Gregory Johnson},   year = {2024},   note = {R package version 1.0},   url = {http://www.schlosslab.org/Clustur/}, }"},{"path":"http://www.schlosslab.org/Clustur/index.html","id":"mothur","dir":"","previous_headings":"","what":"What the Package Does in One Title Case Line","title":"What the Package Does in One Title Case Line","text":"mothur open-sourced software used analysis ecological data. strong presence use analyzing 16S rRNA gene sequences. mothur plethora features, , clustering based genetic similarity, sequence alignment, taxomic assignment, alpha beta diversity, phylotype analysis. numerous publications using software individuals intuitions alike. plan take advantage power mothur, isolate clustering feature. believe allow scientist work familiar tool give rise creation pipelines utilizing package.","code":""},{"path":"http://www.schlosslab.org/Clustur/index.html","id":"clustur","dir":"","previous_headings":"","what":"clustur","title":"What the Package Does in One Title Case Line","text":"clustur developed two main reasons: allow developers easily create pipelines mothur code R, give users powerful clustering algorithm mothur without download . mothur built using rcpp, benefits speed c++ usability R. Additionally, since clustur open source, developers can modify package needed. help us continue create high quality packages, allow everyone take advantage foundation already built.","code":""},{"path":"http://www.schlosslab.org/Clustur/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does in One Title Case Line","text":"","code":"# install via cran install.packages(\"clustur\") # install via github remotes::install_github(\"SchlossLab/Clustur\")"},{"path":"http://www.schlosslab.org/Clustur/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"What the Package Does in One Title Case Line","text":"get started, look “Using Clustur” article.","code":""},{"path":"http://www.schlosslab.org/Clustur/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"What the Package Does in One Title Case Line","text":"feature requrest please visit issue page github use feature tag. like contribute pull request welcomed!","code":""},{"path":"http://www.schlosslab.org/Clustur/reference/cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster Description — cluster","title":"Cluster Description — cluster","text":"must specfiy type matrix inputting cluster object support three types: path phylip column distance file, sparse matrix.","code":""},{"path":"http://www.schlosslab.org/Clustur/reference/cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster Description — cluster","text":"","code":"cluster(   cutoff,   method,   count_table,   simularity_matrix = FALSE,   random_seed = 123,   ... )"},{"path":"http://www.schlosslab.org/Clustur/reference/cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster Description — cluster","text":"cutoff cutoff value. method type cluster wish conduct; furthest, nearest, average, weighted. count_table table names given abundance per group. simularity_matrix using simularity matrix distance matrix random_seed can set random seed consistent results, set 123 ... Either phylip file column file path, sparse distance matrix","code":""},{"path":"http://www.schlosslab.org/Clustur/reference/cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster Description — cluster","text":"string given cluster.","code":""},{"path":"http://www.schlosslab.org/Clustur/reference/cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cluster Description — cluster","text":"Detailed description function.","code":""},{"path":"http://www.schlosslab.org/Clustur/reference/cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster Description — cluster","text":"","code":"# Using a sparse matrix  i_values <- as.integer(1:100)  j_values <- as.integer(sample(1:100, 100, TRUE))  x_values <- as.numeric(runif(100, 0, 1))  s_matrix <- Matrix::spMatrix(nrow=max(i_values),                                ncol=max(i_values),                                i=i_values,                                j=j_values,                                x=x_values)   # Creating a count table using the sparse matrix  count_table_sparse <- data.frame(sequence=as.character(i_values),                                   total=rep(1,times=100))  # furthest method  cluster_results <- cluster(cutoff=0.2, count_table = count_table_sparse,                              sparse_matrix=s_matrix, method=\"furthest\")   # With a phylip file and nearest methods  count_table <- read.delim(example_path(\"amazon1.count_table\"))  amazon_data_phylip <- cluster(phylip_path=example_path(\"98_sq_phylip_amazon.dist\"),                                count_table = count_table, method=\"nearest\", cutoff = 0.2)   # With a column file and average methods   amazon_data_column <- cluster(column_path=example_path(\"96_sq_column_amazon.dist\"),                                count_table = count_table, method=\"average\", cutoff = 0.2)   # Weighted method  amazon_data_column <- cluster(column_path=example_path(\"96_sq_column_amazon.dist\"),                                count_table = count_table, method=\"weighted\", cutoff = 0.2)"},{"path":"http://www.schlosslab.org/Clustur/reference/example_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Path — example_path","title":"Example Path — example_path","text":"Example Path","code":""},{"path":"http://www.schlosslab.org/Clustur/reference/example_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Path — example_path","text":"","code":"example_path(file = NULL)"},{"path":"http://www.schlosslab.org/Clustur/reference/example_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example Path — example_path","text":"file data path looking find.","code":""},{"path":"http://www.schlosslab.org/Clustur/reference/example_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example Path — example_path","text":"path inside package file.","code":""},{"path":"http://www.schlosslab.org/Clustur/reference/example_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Path — example_path","text":"","code":"# This will return the path to our example file example_path(\"98_sq_phylip_amazon.dist\") #> [1] \"/home/runner/work/_temp/Library/clustur/extdata/98_sq_phylip_amazon.dist\""},{"path":"http://www.schlosslab.org/Clustur/reference/opti_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"clustur Description — opti_cluster","title":"clustur Description — opti_cluster","text":"must specfiy type matrix inputting cluster object support three types: path phylip column distance file, sparse matrix.","code":""},{"path":"http://www.schlosslab.org/Clustur/reference/opti_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clustur Description — opti_cluster","text":"","code":"opti_cluster(   cutoff,   count_table,   iterations = 100,   shuffle = TRUE,   simularity_matrix = FALSE,   random_seed = 123,   ... )"},{"path":"http://www.schlosslab.org/Clustur/reference/opti_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clustur Description — opti_cluster","text":"cutoff cutoff value count_table table names given abundance per group. iterations number iterations shuffle boolean determine whether want shuffle data cluster simularity_matrix using simularity matrix distance matrix random_seed can set random seed consistent results, set 123 ... Either phylip file column file path, sparse distance matrix","code":""},{"path":"http://www.schlosslab.org/Clustur/reference/opti_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clustur Description — opti_cluster","text":"data.frame cluster cluster metrics.","code":""},{"path":"http://www.schlosslab.org/Clustur/reference/opti_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"clustur Description — opti_cluster","text":"","code":"# Using a sparse matrix  i_values <- as.integer(1:100)  j_values <- as.integer(sample(1:100, 100, TRUE))  x_values <- as.numeric(runif(100, 0, 1))  s_matrix <- Matrix::spMatrix(nrow=max(i_values),                                ncol=max(i_values),                                i=i_values,                                j=j_values,                                x=x_values)   # Creating a count table using the sparse matrix  count_table_sparse <- data.frame(sequence=as.character(i_values),                                   total=rep(1,times=100))   cluster_results <- opti_cluster(cutoff=0.2,                                   count_table = count_table_sparse,                                  sparse_matrix=s_matrix)   # With a column file  count_table <- read.delim(example_path(\"amazon1.count_table\"))  amazon_data_column <- opti_cluster(column_path=example_path(\"96_sq_column_amazon.dist\"),                                     count_table = count_table, cutoff = 0.2)  # With a phylip file  count_table <- read.delim(example_path(\"amazon1.count_table\"))  amazon_data_phylip <- opti_cluster(phylip_path=example_path(\"98_sq_phylip_amazon.dist\"),                                     count_table = count_table, cutoff = 0.2)"}]
